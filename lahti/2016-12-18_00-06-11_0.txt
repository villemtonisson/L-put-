[
    {
        "view_class": "OutlineView",
        "sequence": "ShowView",
        "view_id": 56716752,
        "time": "2016-12-18T00:06:12.120219"
    },
    {
        "editor_class": "Editor",
        "sequence": "EditorTextCreated",
        "text_widget_id": 56830032,
        "text_widget_class": "CodeViewText",
        "editor_id": 43400528,
        "time": "2016-12-18T00:06:12.129220"
    },
    {
        "sequence": "TextDelete",
        "index1": "1.0",
        "text_widget_id": 56830032,
        "text_widget_class": "CodeViewText",
        "time": "2016-12-18T00:06:12.140221",
        "index2": "2.0"
    },
    {
        "text": "import pygame\nfrom random import randint\n \ndef joonista_laud(m\u00e4ngulaud):\n    for i, rida in enumerate(m\u00e4ngulaud):\n        for j in range(10):\n            ruut=pygame.Rect((175+j*25),(50+i*25),24,24)\n            if rida[j]==\"X\":\n                pygame.draw.rect(ekraani_pind, (255,0,0), ruut)    \n            else:\n                pygame.draw.rect(ekraani_pind, (0,0,0),ruut)\n    pygame.display.flip()\n \ndef vali_jupp():\n    jupid=[\"I\", \"L\", \"RL\", \"S\", \"RS\" , \"Ruut\", \"T\"]\n    x=randint(0,6)\n    valik=jupid[randint(0,6)]\n    if valik==\"I\":\n        return[(0,3),(0,4),(0,5),(0,6)]\n    elif valik==\"L\":\n        return[(0,4),(0,5),(1,5),(2,5)]\n    elif valik==\"RL\":\n        return[(0,5),(0,4),(1,4),(2,4)]\n    elif valik==\"S\":\n        return[(0,5),(0,6),(1,4),(1,5)]\n    elif valik==\"RS\":\n        return[(0,4),(0,5),(1,5),(1,6)]\n    elif valik==\"Ruut\":\n        return[(0,4),(0,5),(1,5),(1,4)]\n    elif valik==\"T\":\n        return[(0,6),(0,4),(0,5),(1,5)]\n \ndef liiguta(plokk, suund, maas):\n     \n    if suund==\"alla\":\n        for a in plokk:\n            if a[0] == 19:\n                x,y = 0,0\n                break\n            else:\n                x,y = 0, 1   \n         \n    elif suund==\"vasakule\":\n        for a in plokk:\n            if a[1] == 0:\n                x,y = 0,0\n                break\n            else:\n                x,y = -1, 0\n                 \n    elif suund==\"paremale\":\n        for a in plokk:\n            if a[1] == 9:\n                x,y = 0,0\n                break\n            else:\n                x,y = 1,0\n                 \n    uus=[]\n    for kordinaat in plokk:\n        uus.append((kordinaat[0]+y, kordinaat[1]+x))\n\n    ##Kui tahad paremale v\u00f5i vasakule liigutada, aga seal on juba plokk ees, siis ei liiguta\n    if suund==\"vasakule\" or suund==\"paremale\":\n        if kokkup\u00f5rge(uus, maas):\n            return plokk\n\n    return(uus)\n \ndef p\u00f6\u00f6ra(plokk, kese, maas):\n\n    if kese==-1:\n        return plokk\n    else:\n        uus=[]\n        for kordinaadid in plokk:\n            y=kordinaadid[0]\n            x=kordinaadid[1]    \n            if kordinaadid!=plokk[kese]:\n                suhex=x-plokk[kese][1]\n                suhey=y-plokk[kese][0] \n                y=plokk[kese][0]+suhex\n                x=plokk[kese][1]-suhey\n     \n            uus.append((y,x))\n    for i in uus:\n        if i in maas or i[1] not in range(0,9) or i[0] not in range(0,19):\n            return p\u00f6\u00f6ra(plokk, kese-1, maas)\n    return (uus)\n \ndef kokkup\u00f5rge(\u00f5hus, maas):\n    for i in \u00f5hus:\n        if i in maas:\n            return True\n    return False\n \ndef eemalda_t\u00e4is(maas, punktid):\n    t\u00e4is=[]\n    for i in range(20):\n        counter=0\n        for j in range(10):\n            if (i, j) in maas:\n                counter+=1\n        if counter==10:\n            t\u00e4is.append(i)\n \n    for rida in t\u00e4is:\n        for i in range(10): \n            maas.remove((rida, i))\n \n    for rida in t\u00e4is:\n        for i, kordinaadid in enumerate(maas):\n            if kordinaadid[0]<rida:\n                maas[i]=(maas[i][0]+1, maas[i][1])\n\n    punktid+=len(t\u00e4is)\n    return maas, punktid\n\ndef kaotus(\u00f5hus, maas):\n    for i in \u00f5hus:\n        if i in maas:\n            return True\n    return False\n\ndef kiirus(punktid):\n    v\u00e4ljund=50+(punktid//10+1)*50\n    return v\u00e4ljund\n    \n\ndef t\u00fchi_laud():  \n    m\u00e4ngulaud=[]\n    for i in range(20):\n        temp=[]\n        for j in range(10):\n            temp.append(\"\")\n        m\u00e4ngulaud.append(temp)\n    return m\u00e4ngulaud\n     \n###PROGRAMM ALGAB\nm\u00e4ngulaud=t\u00fchi_laud()\n \npygame.init()\n##\u00dcks ruut 24x24, nende vahel 1 laiused valged jooned,  m\u00e4ngulaua k\u00f5rgus 499 pikslit, laius 249\n##\u00dcleval ja all 50 pikslit t\u00fchja ruumi, vasakul ja paremal \nekraani_pind = pygame.display.set_mode( (600, 600) )\npygame.display.set_caption(\"Tetris\")\nekraani_pind.fill( (0,0,255) )\nristkylik = pygame.Rect(175, 50, 249, 499)\npygame.draw.rect(ekraani_pind, (255,255,255), ristkylik)\npygame.display.flip()\n\nfont = pygame.font.SysFont(\"monospace\", 30)\n\n\n \n\u00f5hus=vali_jupp()\nmaas=[]\npunktid=0\n \nt=50\ncounter=0\nclock=pygame.time.Clock()\n \ngameexit=False\n##M\u00e4ngu loop\nwhile gameexit==False:\n\n    t=kiirus(punktid)\n\n    ##Punktid ja tase ekraanile\n    kast = pygame.Rect(0, 0, 175, 600)\n    pygame.draw.rect(ekraani_pind, (0,0,255), kast)\n\n    label = font.render(\"Tase\", 1, (255,255,0))\n    ekraani_pind.blit(label, (30, 300))\n    label = font.render(str(punktid//10+1 ), 1, (255,255,0))\n    ekraani_pind.blit(label, (30, 330))\n    \n    label = font.render(\"Punktid\", 1, (255,255,0))\n    ekraani_pind.blit(label, (30, 400))\n    label = font.render(str(punktid), 1, (255,255,0))\n    ekraani_pind.blit(label, (30, 430))\n    \n\n    \n    ##Joonistab ruudud, mis on maas ja \u00f5hus\n    m\u00e4ngulaud=t\u00fchi_laud()\n    for i in \u00f5hus:\n        m\u00e4ngulaud[i[0]][i[1]]=\"X\"\n    for i in maas:\n        m\u00e4ngulaud[i[0]][i[1]]=\"X\"\n    joonista_laud(m\u00e4ngulaud)   \n\n\n\n    ##Kui counter j\u00f5uab 100'ni, kukub plokk \u00fche v\u00f5rra\n    clock.tick(t)\n    counter+=1\n    if counter==100:\n        if \u00f5hus==liiguta(\u00f5hus, \"alla\", maas) or kokkup\u00f5rge(liiguta(\u00f5hus, \"alla\", maas), maas):\n            for i in \u00f5hus:\n                 maas.append(i)\n            \u00f5hus=vali_jupp()\n        else:\n            \u00f5hus=liiguta(\u00f5hus, \"alla\", maas)\n        counter=0\n \n    ##Kasutaja tegevused\n\n    keys = pygame.key.get_pressed() \n    if keys[pygame.K_DOWN]:\n        if \u00f5hus==liiguta(\u00f5hus, \"alla\", maas) or kokkup\u00f5rge(liiguta(\u00f5hus, \"alla\", maas), maas):\n            for i in \u00f5hus:\n                maas.append(i)\n            \u00f5hus=vali_jupp()\n        else:\n            \u00f5hus=liiguta(\u00f5hus, \"alla\", maas)\n        counter=0\n        pygame.time.delay(50)\n\n    for event in pygame.event.get():\n     \n        if event.type == pygame.QUIT:\n            gameexit=True\n        elif event.type == pygame.KEYDOWN:\n \n            if event.key == pygame.K_LEFT:\n                \u00f5hus=liiguta(\u00f5hus, \"vasakule\", maas)\n                 \n            elif event.key == pygame.K_RIGHT:\n                \u00f5hus=liiguta(\u00f5hus, \"paremale\", maas)\n  \n            elif event.key == pygame.K_UP:\n                \u00f5hus=p\u00f6\u00f6ra(\u00f5hus, 3, maas)\n\n            elif event.key == pygame.K_SPACE:\n                while True:\n                    \u00f5hus=liiguta(\u00f5hus, \"alla\", maas)\n                    if \u00f5hus==liiguta(\u00f5hus, \"alla\", maas) or kokkup\u00f5rge(liiguta(\u00f5hus, \"alla\", maas), maas):\n                        break\n                for i in \u00f5hus:\n                    maas.append(i)\n                \u00f5hus=vali_jupp()\n \n    maas, punktid=eemalda_t\u00e4is(maas, punktid)\n    if kaotus(\u00f5hus, maas):\n        gameexit=True\n        \n \n                 \npygame.quit()\n",
        "sequence": "TextInsert",
        "text_widget_id": 56830032,
        "text_widget_class": "CodeViewText",
        "tags": "()",
        "time": "2016-12-18T00:06:12.172222",
        "index": "1.0"
    },
    {
        "text": ">>> ",
        "sequence": "TextInsert",
        "text_widget_id": 43346352,
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "tags": "('toplevel', 'prompt')",
        "time": "2016-12-18T00:06:12.492241",
        "index": "1.0"
    },
    {
        "sequence": "<FocusIn>",
        "widget_id": 43226224,
        "time": "2016-12-18T00:06:12.492241",
        "widget_class": "Workbench"
    },
    {
        "editor_class": "Editor",
        "sequence": "EditorTextCreated",
        "text_widget_id": 56874928,
        "text_widget_class": "CodeViewText",
        "editor_id": 56873456,
        "time": "2016-12-18T00:06:13.474297"
    },
    {
        "sequence": "TextDelete",
        "index2": "2.0",
        "text_widget_id": 56874928,
        "text_widget_class": "CodeViewText",
        "time": "2016-12-18T00:06:13.475297",
        "index1": "1.0"
    },
    {
        "text": "import pygame\nfrom random import randint\n \ndef joonista_laud(m\u00e4ngulaud):\n    for i, rida in enumerate(m\u00e4ngulaud):\n        for j in range(10):\n            ruut=pygame.Rect((175+j*25),(50+i*25),24,24)\n            if rida[j]==\"X\":\n                pygame.draw.rect(ekraani_pind, (255,0,0), ruut)    \n            else:\n                pygame.draw.rect(ekraani_pind, (0,0,0),ruut)\n    pygame.display.flip()\n \ndef vali_jupp():\n    jupid=[\"I\", \"L\", \"RL\", \"S\", \"RS\" , \"Ruut\", \"T\"]\n    x=randint(0,6)\n    valik=jupid[randint(0,6)]\n    if valik==\"I\":\n        return[(0,3),(0,4),(0,5),(0,6)]\n    elif valik==\"L\":\n        return[(0,4),(0,5),(1,5),(2,5)]\n    elif valik==\"RL\":\n        return[(0,5),(0,4),(1,4),(2,4)]\n    elif valik==\"S\":\n        return[(0,5),(0,6),(1,4),(1,5)]\n    elif valik==\"RS\":\n        return[(0,4),(0,5),(1,5),(1,6)]\n    elif valik==\"Ruut\":\n        return[(0,4),(0,5),(1,5),(1,4)]\n    elif valik==\"T\":\n        return[(0,6),(0,4),(0,5),(1,5)]\n \ndef liiguta(plokk, suund, maas):\n     \n    if suund==\"alla\":\n        for a in plokk:\n            if a[0] == 19:\n                x,y = 0,0\n                break\n            else:\n                x,y = 0, 1   \n         \n    elif suund==\"vasakule\":\n        for a in plokk:\n            if a[1] == 0:\n                x,y = 0,0\n                break\n            else:\n                x,y = -1, 0\n                 \n    elif suund==\"paremale\":\n        for a in plokk:\n            if a[1] == 9:\n                x,y = 0,0\n                break\n            else:\n                x,y = 1,0\n                 \n    uus=[]\n    for kordinaat in plokk:\n        uus.append((kordinaat[0]+y, kordinaat[1]+x))\n\n    ##Kui tahad paremale v\u00f5i vasakule liigutada, aga seal on juba plokk ees, siis ei liiguta\n    if suund==\"vasakule\" or suund==\"paremale\":\n        if kokkup\u00f5rge(uus, maas):\n            return plokk\n\n    return(uus)\n \ndef p\u00f6\u00f6ra(plokk, kese, maas):\n\n    if kese==-1:\n        return plokk\n    else:\n        uus=[]\n        for kordinaadid in plokk:\n            y=kordinaadid[0]\n            x=kordinaadid[1]    \n            if kordinaadid!=plokk[kese]:\n                suhex=x-plokk[kese][1]\n                suhey=y-plokk[kese][0] \n                y=plokk[kese][0]+suhex\n                x=plokk[kese][1]-suhey\n     \n            uus.append((y,x))\n    for i in uus:\n        if i in maas or i[1] not in range(0,9) or i[0] not in range(0,19):\n            return p\u00f6\u00f6ra(plokk, kese-1, maas)\n    return (uus)\n \ndef kokkup\u00f5rge(\u00f5hus, maas):\n    for i in \u00f5hus:\n        if i in maas:\n            return True\n    return False\n \ndef eemalda_t\u00e4is(maas, punktid):\n    t\u00e4is=[]\n    for i in range(20):\n        counter=0\n        for j in range(10):\n            if (i, j) in maas:\n                counter+=1\n        if counter==10:\n            t\u00e4is.append(i)\n \n    for rida in t\u00e4is:\n        for i in range(10): \n            maas.remove((rida, i))\n \n    for rida in t\u00e4is:\n        for i, kordinaadid in enumerate(maas):\n            if kordinaadid[0]<rida:\n                maas[i]=(maas[i][0]+1, maas[i][1])\n\n    punktid+=len(t\u00e4is)\n    return maas, punktid\n\ndef kaotus(\u00f5hus, maas):\n    for i in \u00f5hus:\n        if i in maas:\n            return True\n    return False\n\ndef kiirus(punktid):\n    v\u00e4ljund=50+(punktid//10+1)*50\n    return v\u00e4ljund\n    \n\ndef t\u00fchi_laud():  \n    m\u00e4ngulaud=[]\n    for i in range(20):\n        temp=[]\n        for j in range(10):\n            temp.append(\"\")\n        m\u00e4ngulaud.append(temp)\n    return m\u00e4ngulaud\n     \n###PROGRAMM ALGAB\nm\u00e4ngulaud=t\u00fchi_laud()\n \npygame.init()\n##\u00dcks ruut 24x24, nende vahel 1 laiused valged jooned,  m\u00e4ngulaua k\u00f5rgus 499 pikslit, laius 249\n##\u00dcleval ja all 50 pikslit t\u00fchja ruumi, vasakul ja paremal \nekraani_pind = pygame.display.set_mode( (600, 600) )\npygame.display.set_caption(\"Tetris\")\nekraani_pind.fill( (0,0,255) )\nristkylik = pygame.Rect(175, 50, 249, 499)\npygame.draw.rect(ekraani_pind, (255,255,255), ristkylik)\npygame.display.flip()\n\nfont = pygame.font.SysFont(\"monospace\", 30)\n\n\n \n\u00f5hus=vali_jupp()\nmaas=[]\npunktid=0\n \nt=50\ncounter=0\nclock=pygame.time.Clock()\n \ngameexit=False\n##M\u00e4ngu loop\nwhile gameexit==False:\n\n    t=kiirus(punktid)\n\n    ##Punktid ja tase ekraanile\n    kast = pygame.Rect(0, 0, 175, 600)\n    pygame.draw.rect(ekraani_pind, (0,0,255), kast)\n\n    label = font.render(\"Tase\", 1, (255,255,0))\n    ekraani_pind.blit(label, (30, 300))\n    label = font.render(str(punktid//10+1 ), 1, (255,255,0))\n    ekraani_pind.blit(label, (30, 330))\n    \n    label = font.render(\"Punktid\", 1, (255,255,0))\n    ekraani_pind.blit(label, (30, 400))\n    label = font.render(str(punktid), 1, (255,255,0))\n    ekraani_pind.blit(label, (30, 430))\n    \n\n    \n    ##Joonistab ruudud, mis on maas ja \u00f5hus\n    m\u00e4ngulaud=t\u00fchi_laud()\n    for i in \u00f5hus:\n        m\u00e4ngulaud[i[0]][i[1]]=\"X\"\n    for i in maas:\n        m\u00e4ngulaud[i[0]][i[1]]=\"X\"\n    joonista_laud(m\u00e4ngulaud)   \n\n\n\n    ##Kui counter j\u00f5uab 100'ni, kukub plokk \u00fche v\u00f5rra\n    clock.tick(t)\n    counter+=1\n    if counter==100:\n        if \u00f5hus==liiguta(\u00f5hus, \"alla\", maas) or kokkup\u00f5rge(liiguta(\u00f5hus, \"alla\", maas), maas):\n            for i in \u00f5hus:\n                 maas.append(i)\n            \u00f5hus=vali_jupp()\n        else:\n            \u00f5hus=liiguta(\u00f5hus, \"alla\", maas)\n        counter=0\n \n    ##Kasutaja tegevused\n\n    keys = pygame.key.get_pressed() \n    if keys[pygame.K_DOWN]:\n        if \u00f5hus==liiguta(\u00f5hus, \"alla\", maas) or kokkup\u00f5rge(liiguta(\u00f5hus, \"alla\", maas), maas):\n            for i in \u00f5hus:\n                maas.append(i)\n            \u00f5hus=vali_jupp()\n        else:\n            \u00f5hus=liiguta(\u00f5hus, \"alla\", maas)\n        counter=0\n        pygame.time.delay(50)\n\n    for event in pygame.event.get():\n     \n        if event.type == pygame.QUIT:\n            gameexit=True\n        elif event.type == pygame.KEYDOWN:\n \n            if event.key == pygame.K_LEFT:\n                \u00f5hus=liiguta(\u00f5hus, \"vasakule\", maas)\n                 \n            elif event.key == pygame.K_RIGHT:\n                \u00f5hus=liiguta(\u00f5hus, \"paremale\", maas)\n  \n            elif event.key == pygame.K_UP:\n                \u00f5hus=p\u00f6\u00f6ra(\u00f5hus, 3, maas)\n\n            elif event.key == pygame.K_SPACE:\n                while True:\n                    \u00f5hus=liiguta(\u00f5hus, \"alla\", maas)\n                    if \u00f5hus==liiguta(\u00f5hus, \"alla\", maas) or kokkup\u00f5rge(liiguta(\u00f5hus, \"alla\", maas), maas):\n                        break\n                for i in \u00f5hus:\n                    maas.append(i)\n                \u00f5hus=vali_jupp()\n \n    maas, punktid=eemalda_t\u00e4is(maas, punktid)\n    if kaotus(\u00f5hus, maas):\n        gameexit=True\n        \n \n                 \npygame.quit()\n",
        "sequence": "TextInsert",
        "text_widget_id": 56874928,
        "text_widget_class": "CodeViewText",
        "tags": "()",
        "time": "2016-12-18T00:06:13.484297",
        "index": "1.0"
    },
    {
        "widget_id": 56874928,
        "time": "2016-12-18T00:06:22.009785",
        "text_widget_id": 56874928,
        "sequence": "<Button-1>",
        "text_widget_class": "CodeViewText",
        "widget_class": "CodeViewText"
    },
    {
        "widget_id": 56874928,
        "time": "2016-12-18T00:06:23.016843",
        "text_widget_id": 56874928,
        "sequence": "<Button-1>",
        "text_widget_class": "CodeViewText",
        "widget_class": "CodeViewText"
    },
    {
        "text": "5",
        "sequence": "TextInsert",
        "text_widget_id": 56874928,
        "text_widget_class": "CodeViewText",
        "tags": "None",
        "time": "2016-12-18T00:06:24.672937",
        "index": "9.54"
    },
    {
        "sequence": "TextDelete",
        "index2": "None",
        "text_widget_id": 56874928,
        "text_widget_class": "CodeViewText",
        "time": "2016-12-18T00:06:26.649050",
        "index1": "9.54"
    },
    {
        "sequence": "TextDelete",
        "index2": "2.0",
        "text_widget_id": 43346352,
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "time": "2016-12-18T00:06:27.804116",
        "index1": "1.4"
    },
    {
        "text": "%Run 'tetris (1).py'\n",
        "sequence": "TextInsert",
        "text_widget_id": 43346352,
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "tags": "('automagic', 'toplevel', 'command')",
        "time": "2016-12-18T00:06:27.804116",
        "index": "1.4"
    },
    {
        "editor_class": "Editor",
        "sequence": "Save",
        "text_widget_id": 56874928,
        "text_widget_class": "CodeViewText",
        "editor_id": 56873456,
        "time": "2016-12-18T00:06:27.806117"
    },
    {
        "sequence": "ShellCommand",
        "command_text": "%Run 'tetris (1).py'\n",
        "time": "2016-12-18T00:06:27.916123"
    },
    {
        "denied": "False",
        "sequence": "Command",
        "time": "2016-12-18T00:06:27.916123",
        "command_id": "run_current_script"
    },
    {
        "sequence": "<FocusOut>",
        "widget_id": 43226224,
        "time": "2016-12-18T00:06:28.491156",
        "widget_class": "Workbench"
    },
    {
        "sequence": "<FocusIn>",
        "widget_id": 43226224,
        "time": "2016-12-18T00:08:12.940130",
        "widget_class": "Workbench"
    },
    {
        "text": ">>> ",
        "sequence": "TextInsert",
        "text_widget_id": 43346352,
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "tags": "('toplevel', 'prompt')",
        "time": "2016-12-18T00:08:12.954131",
        "index": "2.0"
    },
    {
        "sequence": "TextDelete",
        "index2": "3.0",
        "text_widget_id": 43346352,
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "time": "2016-12-18T00:08:21.987647",
        "index1": "2.4"
    },
    {
        "text": "%Run 'tetris (1).py'\n",
        "sequence": "TextInsert",
        "text_widget_id": 43346352,
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "tags": "('automagic', 'toplevel', 'command')",
        "time": "2016-12-18T00:08:21.987647",
        "index": "2.4"
    },
    {
        "sequence": "ShellCommand",
        "command_text": "%Run 'tetris (1).py'\n",
        "time": "2016-12-18T00:08:22.106654"
    },
    {
        "denied": "False",
        "sequence": "Command",
        "time": "2016-12-18T00:08:22.106654",
        "command_id": "run_current_script"
    },
    {
        "sequence": "<FocusOut>",
        "widget_id": 43226224,
        "time": "2016-12-18T00:08:22.396671",
        "widget_class": "Workbench"
    },
    {
        "text": ">>> ",
        "sequence": "TextInsert",
        "text_widget_id": 43346352,
        "text_widget_context": "shell",
        "text_widget_class": "ShellText",
        "tags": "('toplevel', 'prompt')",
        "time": "2016-12-18T00:08:36.589483",
        "index": "3.0"
    },
    {
        "sequence": "<FocusIn>",
        "widget_id": 43226224,
        "time": "2016-12-18T00:08:56.064596",
        "widget_class": "Workbench"
    }
]